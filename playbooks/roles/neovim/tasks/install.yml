---
- name: Check if nvim config exists
  ansible.builtin.stat:
    path: "{{ nvim_config_dir }}/nvim"
  register: nvim_config_status
  changed_when: false

- name: Backup existing nvim config if enabled and exists
  block:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ nvim_config_dir }}/nvim.bak"
        state: directory
        mode: '0755'
    - name: Copy existing config to backup
      become: true
      synchronize:
        src: "{{ nvim_config_dir }}/nvim/"
        dest: "{{ nvim_config_dir }}/nvim.bak/"
        recursive: true
        owner: true
    - name: Remove existing nvim directory
      ansible.builtin.file:
        path: "{{ nvim_config_dir }}/nvim/"
        state: absent
  when:
    - backup_nvim | default(true) | bool
    - nvim_config_status.stat.exists
  rescue:
    - name: Backup failed warning
      ansible.builtin.debug:
        msg: "NVim config backup failed, continuing with installation"
      changed_when: false

- name: Install Neovim and dependencies (alternative)
  block:
    - name: Check if Neovim is installed
      ansible.builtin.command: which nvim
      register: nvim_check
      ignore_errors: true
      changed_when: false
    - name: Ensure Snap is installed (for Debian systems)
      ansible.builtin.package:
        name: snapd
        state: present
      when: ansible_facts['os_family'] == "Debian" 
    - name: Install Neovim using Snap in Debian
      community.general.snap:
        name: nvim
        classic: true
      when: ansible_facts['os_family'] == "Debian" and nvim_check.rc != 0
    - name: Install Neovim using the package manager (non-Debian systems)
      ansible.builtin.package:
        name:
          - neovim
          - git
          - make
        state: present
      when: ansible_facts['os_family'] != "Debian" and nvim_check.rc != 0
  become: true


